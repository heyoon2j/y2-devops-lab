apiVersion: apps/v1
kind: Deployment
metadata:                   # Deployment metadata
  name: nginx-deployment          # Name
  namespace: default              # Namespace
  labels:                         # Label
    app: nginx
  annotations:                    # Annotations
    buildversion: 1.34
spec:
  replicas: 3                     # Replica numbers
  selector:                       # Deployment가 Observing을 위한 Selector
    matchLabels:
      app: nginx
  template:                 # Pod의 template
    metadata:                     # Pod metadata
      labels:                     # Pod label
        app: nginx
    spec:
      ## Security Context
      securityContext:
        runAsUser: 1000
        runAsGroup: 3000
        fsGroup: 2000
      containers:
      - name: nginx                 # Pod name
        image: nginx:1.14.2         # Image name
        ports:
        - containerPort: 80
      # 환경 설정
        env:
        - name: GREETING
          value: "Warm greetings to"
        - name: HONORIFIC
          value: "The Most Honorable"
        - name: NAME
          value: "Kubernetes"
      # 컨테이너 명령어 : Docker - Command == Entrypoint / Args == CMD
        command: ["echo"]
        args: ["$(GREETING) $(HONORIFIC) $(NAME)"]        
        volumeMounts:
        - name: nfs-vol
          mountPath: /audit
      # Image Pull 시, 사용할 정보
      imagePullSecrets:
      - name: regcred
      volumes:
      - name: nfs-vol
        persistentVolumeClaim:
          claimName: nfs-pvc
## 컨테이너 리스소 사용 제한
      resources:
        requests:
          memory: "64Mi"
          cpu: "250m"
        limits:
          memory: "128Mi"
          cpu: "500m"
## 배포 전략
      strategy:
        # Rolling Update
        rollingUpdate:
          maxSurge: 25%
          maxUnavailable: 25%
        type: RollingUpdate
        # Recreate
        type: Recreate

## 스케줄링 - Node 선택 : nodeName / nodeSelector / affinity(Node, Pod) / tolerations
    ## Node Name - Node 이름 입력
      nodeName: test1
    ## Node Selector - 특정 라벨을 가진 노드 : key:value
      nodeSelector:
        worker: test1
    ## Node Affinity - 선호도 : ex> required DuringScheduling, Ignored DuringExecution : 처음 만들어지는 파드는 일치되는 경우에만 , 실행중인 파드는 무시
      affinity:
        nodeAffinity:
          # 유형 1 : 파드 생성시, 조건 불충분시 생성 X / 실행된 파드는 그대로 유지
          # 사용 예: 특정 하드웨어를 사용하는 노드에만 파드를 배포하고자 할 때 사용
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In                # In, NotIn, Exists, DoesNotExist
                values:
                - linux
          # 유형 2 : 파드 생성시, 조건 불충분하더라도 다른 노드에 생성 / 실행된 파드는 그대로 유지
          # 사용 예: 특정 노드를 선호하지만, 그 노드가 없을 때도 파드가 스케줄링되어야 할 때 사용됩니다.
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: label-1
                operator: In
                values:
                - key-1
          - weight: 50
            preference:
              matchExpressions:
              - key: label-2
                operator: In
                values:
                - key-2
        # 유형 3 
        # 거의 안쓰임 (실행 중인 파드에 쓰려면 사실 Taint를 통해서 사용하는 것이 좋지 않나)
        requiredDuringSchedulingRequireDuringExecution:

    ## Taints & Toleration
      tolerations:
      - key: "key1"
        operator: "Equal"
        value: "value1"
        effect: "NoSchedule"
        # NoSchedule : 설정 이후 Toleration을 가진 Pod만 스케줄링 됨
        # PreferNoSchedule : 반드시 금지는 아니지만, 다른 옵션이 없는 경우에만 스케줄링 됨
        # NoExecure : 설정 전 Pod에 Toleration이 설정되어 있지 않으면, 추출되어 다른 노드로 이동



===========
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "2"
  creationTimestamp: "2024-07-29T07:33:10Z"
  generation: 2
  name: frontend
  namespace: default
  resourceVersion: "1159"
  uid: 8753ae61-7988-4a6f-823b-b30a3112d9da
spec:
  minReadySeconds: 20
  progressDeadlineSeconds: 600
  replicas: 4
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: webapp
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate       # Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: webapp
    spec:
      containers:
      - image: kodekloud/webapp-color:v2
        imagePullPolicy: IfNotPresent
        name: simple-webapp
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 4
  conditions:
  - lastTransitionTime: "2024-07-29T07:33:37Z"
    lastUpdateTime: "2024-07-29T07:33:37Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  - lastTransitionTime: "2024-07-29T07:33:10Z"
    lastUpdateTime: "2024-07-29T07:42:28Z"
    message: ReplicaSet "frontend-69b69fcc6d" has successfully progressed.
    reason: NewReplicaSetAvailable
    status: "True"
    type: Progressing
  observedGeneration: 2
  readyReplicas: 4
  replicas: 4
  updatedReplicas: 4